{
    "swagger": "2.0",
    "info": {
        "description": "Specification for Case Management API.\n",
        "version": "1.0.0",
        "title": "Case Management API",
        "contact": {"email": "balvinder.dang@marklogic.com"},
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        }
    },
    "tags": [{
        "name": "case",
        "description": "Everything about your cases",
        "externalDocs": {
            "description": "Find out more",
            "url": "https://github.com/marklogic/marklogicworkflow/"
        }
    }],
    "paths": {
        "/case": {
            "post": {
                "tags": ["case"],
                "summary": "Create a new case instance",
                "operationId": "addCase",
                "consumes": ["application/xml"],
                "produces": ["application/xml"],
                "parameters": [{
                    "in": "body",
                    "name": "body",
                    "description": "Case object that needs to be added to the case management repository",
                    "required": true,
                    "schema": {"$ref": "#/definitions/Case"}
                }],
                "responses": {"405": {"description": "Invalid input"}},
                "security": [{"caserepo_auth": [
                    "write:cases",
                    "read:cases"
                ]}]
            },
            "put": {
                "tags": ["case"],
                "summary": "Update an existing case",
                "operationId": "updatecase",
                "consumes": [
                    "application/json",
                    "application/xml"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [{
                    "in": "body",
                    "name": "body",
                    "description": "case object that needs to be added to the repo",
                    "required": true,
                    "schema": {"$ref": "#/definitions/Case"}
                }],
                "responses": {
                    "400": {"description": "Invalid ID supplied"},
                    "404": {"description": "case not found"},
                    "405": {"description": "Validation exception"}
                },
                "security": [{"caserepo_auth": [
                    "write:cases",
                    "read:cases"
                ]}]
            }
        },
        "/case/findByStatus": {"get": {
            "tags": ["case"],
            "summary": "Finds cases by status",
            "description": "Multiple status values can be provided with comma separated strings",
            "operationId": "findcasesByStatus",
            "produces": [
                "application/json",
                "application/xml"
            ],
            "parameters": [{
                "name": "status",
                "in": "query",
                "description": "Status values that need to be considered for filter",
                "required": true,
                "type": "array",
                "items": {
                    "type": "string",
                    "enum": [
                        "available",
                        "pending",
                        "sold"
                    ],
                    "default": "available"
                },
                "collectionFormat": "multi"
            }],
            "responses": {
                "200": {
                    "description": "successful operation",
                    "schema": {
                        "type": "array",
                        "items": {"$ref": "#/definitions/Case"}
                    }
                },
                "400": {"description": "Invalid status value"}
            },
            "security": [{"caserepo_auth": [
                "write:cases",
                "read:cases"
            ]}]
        }},
        "/case/findByTags": {"get": {
            "tags": ["case"],
            "summary": "Finds cases by tags",
            "description": "Muliple tags can be provided with comma separated strings. Use\\ \\ tag1, tag2, tag3 for testing.",
            "operationId": "findcasesByTags",
            "produces": [
                "application/json",
                "application/xml"
            ],
            "parameters": [{
                "name": "tags",
                "in": "query",
                "description": "Tags to filter by",
                "required": true,
                "type": "array",
                "items": {"type": "string"},
                "collectionFormat": "multi"
            }],
            "responses": {
                "200": {
                    "description": "successful operation",
                    "schema": {
                        "type": "array",
                        "items": {"$ref": "#/definitions/Case"}
                    }
                },
                "400": {"description": "Invalid tag value"}
            },
            "security": [{"caserepo_auth": [
                "write:cases",
                "read:cases"
            ]}],
            "deprecated": true
        }},
        "/case/{caseId}": {
            "get": {
                "tags": ["case"],
                "summary": "Find case by ID",
                "description": "Returns a single case",
                "operationId": "getcaseById",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [{
                    "name": "caseId",
                    "in": "path",
                    "description": "ID of case to return",
                    "required": true,
                    "type": "integer",
                    "format": "int64"
                }],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {"$ref": "#/definitions/Case"}
                    },
                    "400": {"description": "Invalid ID supplied"},
                    "404": {"description": "case not found"}
                },
                "security": [{"api_key": []}]
            },
            "post": {
                "tags": ["case"],
                "summary": "Updates a case in the repo with form data",
                "operationId": "updatecaseWithForm",
                "consumes": ["application/x-www-form-urlencoded"],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "caseId",
                        "in": "path",
                        "description": "ID of case that needs to be updated",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "name",
                        "in": "formData",
                        "description": "Updated name of the case",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "status",
                        "in": "formData",
                        "description": "Updated status of the case",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {"405": {"description": "Invalid input"}},
                "security": [{"caserepo_auth": [
                    "write:cases",
                    "read:cases"
                ]}]
            },
            "delete": {
                "tags": ["case"],
                "summary": "Deletes a case",
                "operationId": "deletecase",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "api_key",
                        "in": "header",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "caseId",
                        "in": "path",
                        "description": "case id to delete",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "responses": {
                    "400": {"description": "Invalid ID supplied"},
                    "404": {"description": "case not found"}
                },
                "security": [{"caserepo_auth": [
                    "write:cases",
                    "read:cases"
                ]}]
            }
        },
        "/case/{caseId}/uploadImage": {"post": {
            "tags": ["case"],
            "summary": "uploads an image",
            "operationId": "uploadFile",
            "consumes": ["multipart/form-data"],
            "produces": ["application/json"],
            "parameters": [
                {
                    "name": "caseId",
                    "in": "path",
                    "description": "ID of case to update",
                    "required": true,
                    "type": "integer",
                    "format": "int64"
                },
                {
                    "name": "additionalMetadata",
                    "in": "formData",
                    "description": "Additional data to pass to server",
                    "required": false,
                    "type": "string"
                },
                {
                    "name": "file",
                    "in": "formData",
                    "description": "file to upload",
                    "required": false,
                    "type": "file"
                }
            ],
            "responses": {"200": {
                "description": "successful operation",
                "schema": {"$ref": "#/definitions/ApiResponse"}
            }},
            "security": [{"caserepo_auth": [
                "write:cases",
                "read:cases"
            ]}]
        }},
        "/repo/inventory": {"get": {
            "tags": ["repo"],
            "summary": "Returns case inventories by status",
            "description": "Returns a map of status codes to quantities",
            "operationId": "getInventory",
            "produces": ["application/json"],
            "parameters": [],
            "responses": {"200": {
                "description": "successful operation",
                "schema": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "integer",
                        "format": "int32"
                    }
                }
            }},
            "security": [{"api_key": []}]
        }},
        "/repo/order": {"post": {
            "tags": ["repo"],
            "summary": "Place an order for a case",
            "operationId": "placeOrder",
            "produces": [
                "application/json",
                "application/xml"
            ],
            "parameters": [{
                "in": "body",
                "name": "body",
                "description": "order placed for purchasing the case",
                "required": true,
                "schema": {"$ref": "#/definitions/Order"}
            }],
            "responses": {
                "200": {
                    "description": "successful operation",
                    "schema": {"$ref": "#/definitions/Order"}
                },
                "400": {"description": "Invalid Order"}
            }
        }},
        "/repo/order/{orderId}": {
            "get": {
                "tags": ["repo"],
                "summary": "Find purchase order by ID",
                "description": "For valid response try integer IDs with value >= 1 and <= 10.\\ \\ Other values will generated exceptions",
                "operationId": "getOrderById",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [{
                    "name": "orderId",
                    "in": "path",
                    "description": "ID of case that needs to be fetched",
                    "required": true,
                    "type": "integer",
                    "maximum": 10,
                    "minimum": 1,
                    "format": "int64"
                }],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {"$ref": "#/definitions/Order"}
                    },
                    "400": {"description": "Invalid ID supplied"},
                    "404": {"description": "Order not found"}
                }
            },
            "delete": {
                "tags": ["repo"],
                "summary": "Delete purchase order by ID",
                "description": "For valid response try integer IDs with positive integer value.\\ \\ Negative or non-integer values will generate API errors",
                "operationId": "deleteOrder",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [{
                    "name": "orderId",
                    "in": "path",
                    "description": "ID of the order that needs to be deleted",
                    "required": true,
                    "type": "integer",
                    "minimum": 1,
                    "format": "int64"
                }],
                "responses": {
                    "400": {"description": "Invalid ID supplied"},
                    "404": {"description": "Order not found"}
                }
            }
        },
        "/user": {"post": {
            "tags": ["user"],
            "summary": "Create user",
            "description": "This can only be done by the logged in user.",
            "operationId": "createUser",
            "produces": [
                "application/json",
                "application/xml"
            ],
            "parameters": [{
                "in": "body",
                "name": "body",
                "description": "Created user object",
                "required": true,
                "schema": {"$ref": "#/definitions/User"}
            }],
            "responses": {"default": {"description": "successful operation"}}
        }},
        "/user/createWithArray": {"post": {
            "tags": ["user"],
            "summary": "Creates list of users with given input array",
            "operationId": "createUsersWithArrayInput",
            "produces": [
                "application/json",
                "application/xml"
            ],
            "parameters": [{
                "in": "body",
                "name": "body",
                "description": "List of user object",
                "required": true,
                "schema": {
                    "type": "array",
                    "items": {"$ref": "#/definitions/User"}
                }
            }],
            "responses": {"default": {"description": "successful operation"}}
        }},
        "/user/createWithList": {"post": {
            "tags": ["user"],
            "summary": "Creates list of users with given input array",
            "operationId": "createUsersWithListInput",
            "produces": [
                "application/json",
                "application/xml"
            ],
            "parameters": [{
                "in": "body",
                "name": "body",
                "description": "List of user object",
                "required": true,
                "schema": {
                    "type": "array",
                    "items": {"$ref": "#/definitions/User"}
                }
            }],
            "responses": {"default": {"description": "successful operation"}}
        }},
        "/user/login": {"get": {
            "tags": ["user"],
            "summary": "Logs user into the system",
            "operationId": "loginUser",
            "produces": [
                "application/json",
                "application/xml"
            ],
            "parameters": [
                {
                    "name": "username",
                    "in": "query",
                    "description": "The user name for login",
                    "required": true,
                    "type": "string"
                },
                {
                    "name": "password",
                    "in": "query",
                    "description": "The password for login in clear text",
                    "required": true,
                    "type": "string"
                }
            ],
            "responses": {
                "200": {
                    "description": "successful operation",
                    "schema": {"type": "string"},
                    "headers": {
                        "X-Rate-Limit": {
                            "type": "integer",
                            "format": "int32",
                            "description": "calls per hour allowed by the user"
                        },
                        "X-Expires-After": {
                            "type": "string",
                            "format": "date-time",
                            "description": "date in UTC when token expires"
                        }
                    }
                },
                "400": {"description": "Invalid username/password supplied"}
            }
        }},
        "/user/logout": {"get": {
            "tags": ["user"],
            "summary": "Logs out current logged in user session",
            "operationId": "logoutUser",
            "produces": [
                "application/json",
                "application/xml"
            ],
            "parameters": [],
            "responses": {"default": {"description": "successful operation"}}
        }},
        "/user/{username}": {
            "get": {
                "tags": ["user"],
                "summary": "Get user by user name",
                "operationId": "getUserByName",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [{
                    "name": "username",
                    "in": "path",
                    "description": "The name that needs to be fetched. Use user1 for testing.",
                    "required": true,
                    "type": "string"
                }],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {"$ref": "#/definitions/User"}
                    },
                    "400": {"description": "Invalid username supplied"},
                    "404": {"description": "User not found"}
                }
            },
            "put": {
                "tags": ["user"],
                "summary": "Updated user",
                "description": "This can only be done by the logged in user.",
                "operationId": "updateUser",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "username",
                        "in": "path",
                        "description": "name that need to be updated",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Updated user object",
                        "required": true,
                        "schema": {"$ref": "#/definitions/User"}
                    }
                ],
                "responses": {
                    "400": {"description": "Invalid user supplied"},
                    "404": {"description": "User not found"}
                }
            },
            "delete": {
                "tags": ["user"],
                "summary": "Delete user",
                "description": "This can only be done by the logged in user.",
                "operationId": "deleteUser",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [{
                    "name": "username",
                    "in": "path",
                    "description": "The name that needs to be deleted",
                    "required": true,
                    "type": "string"
                }],
                "responses": {
                    "400": {"description": "Invalid username supplied"},
                    "404": {"description": "User not found"}
                }
            }
        }
    },
    "securityDefinitions": {
        "caserepo_auth": {
            "type": "oauth2",
            "authorizationUrl": "http://caserepo.swagger.io/oauth/dialog",
            "flow": "implicit",
            "scopes": {
                "write:cases": "modify cases in your account",
                "read:cases": "read your cases"
            }
        },
        "api_key": {
            "type": "apiKey",
            "name": "api_key",
            "in": "header"
        }
    },
    "definitions": {
        "Order": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "caseId": {
                    "type": "integer",
                    "format": "int64"
                },
                "quantity": {
                    "type": "integer",
                    "format": "int32"
                },
                "shipDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "status": {
                    "type": "string",
                    "description": "Order Status",
                    "enum": [
                        "placed",
                        "approved",
                        "delivered"
                    ]
                },
                "complete": {
                    "type": "boolean",
                    "default": false
                }
            },
            "xml": {"name": "Order"}
        },
        "Category": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "name": {"type": "string"}
            },
            "xml": {"name": "Category"}
        },
        "User": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "username": {"type": "string"},
                "firstName": {"type": "string"},
                "lastName": {"type": "string"},
                "email": {"type": "string"},
                "password": {"type": "string"},
                "phone": {"type": "string"},
                "userStatus": {
                    "type": "integer",
                    "format": "int32",
                    "description": "User Status"
                }
            },
            "xml": {"name": "User"}
        },
        "Tag": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "name": {"type": "string"}
            },
            "xml": {"name": "Tag"}
        },
        "Case": {
            "type": "object",
            "required": [
                "data",
                "phases",
                "attachments",                               
                "status",
                "active-phase"                
            ],
            "properties": {
                "status": {
                    "type": "string",
                    "example" : "NotActive|Open|Closed|Provisional|Cancelled" 
                },
                "data": {"$ref": "#/definitions/Data"},
                "phases": {"$ref": "#/definitions/Phases"},
                "attachments": {"$ref": "#/definitions/Attachments"},
                "active-phase": {
                    "type": "string",
                    "example": "phaseUid1"
                },
                "photoUrls": {
                    "type": "array",
                    "xml": {
                        "name": "photoUrl",
                        "wrapped": true
                    },
                    "items": {"type": "string"}
                },
                "tags": {
                    "type": "array",
                    "xml": {
                        "name": "tags",
                        "wrapped": true
                    },
                    "items": {"$ref": "#/definitions/Tag"}
                },
                "status": {
                    "type": "string",
                    "description": "case status in the repo",
                    "enum": [
                        "available",
                        "pending",
                        "sold"
                    ]
                }
            },
            "xml": {"name": "Case"}
        },
        "ApiResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "format": "int32"
                },
                "type": {"type": "string"},
                "message": {"type": "string"}
            }
        }
    },
    "externalDocs": {
        "description": "Find out more about Swagger",
        "url": "http://swagger.io"
    },
    "host": "virtserver.swaggerhub.com",
    "basePath": "/bdang/case-management-api/1.0.0",
    "schemes": [
        "https",
        "http"
    ]
}