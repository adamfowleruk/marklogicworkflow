# Case REST API

## Phase 1

POST case 
        - create a new case instance, case instance XML can be sent from the client
        - generate UID for case.
        - permissions - discussion?
        - maintain audit-trail
        
PUT case - Update an existing case - C (including update tag support)
  - TODO update tests with update-tag support (and add a test for old tag)
GET case - Get a case instance (optional - summary only)
 - whole case XML as it is.
 - filter out audit info, only provide last-updated and created-date.
 

POST caseactivity - Add a ad-hoc case activity to a given case, caseId, phaseId
PATCH caseactivity - patch - insert, replace, delete elements in an activity  
PUT caseactivity - Update the elements within a activity, adds or updates elements that have been provided, never delete any element. For delete use PATCH.
GET caseactivity - Return a single case activity  

PROCESS
- store RDF XML in case XML, and as triples in the database 


## Phase 2

POST case - Create a new case instance, based on template ID
        - create case based on the template ID
        - identity of the user
        - metadata
        - filter criteria based on which casetemplate is filtered and certain activities are included or not. 
         
PUT case - no change needed from Phase 1
  - 
GET case 
 - similar to eclaims, filter the fields based on XPath
 
DELETE case - Close a case (Does NOT actually delete the record, it is a logical delete)


POST casetemplate - Create a new template, use DLS versioning functions, think how case refers to the caseTemplateId? 
PUT casetemplate - update a template, use DLS versioning functions
        - Update the elements within the template, adds or updates elements that have been provided, never delete any element. 
        -
        -
        -
PATCH casetemplate - For delete use PATCH.
        - add a phase
        - add a activity        
DELETE casetemplate - Logical delete of a case template 
GET casetemplate - Retrieve a case template

Security (Authorisation/Entitlement)
- All Case API's would accept <sec:permissions> which would have role-name and capability. If permissions are supplied then no default permissions are applied, otherwise
default permissions are applied  
- there will be default roles like "case-admin", "case-reader", "case-writer" etc which will be used to authroize wether the API(s) can be invoked or not. 
 
PROCESS
- store graph in triples DB, but return RDF XML as part of GET case API. 
- TODO - Discuss how graph is created as a whole or API's to maintain graph ?
- how process is validated ? and business rules are enforced ?
- how initial planning and re-planning work ? 

POST casesearch - snippet - case metadata, title, last-modified, 4-5 properties about the case.
(including historical)

## Phase 3

POST casetemplatesearch

PROCESS - 
- apis to do validation, reasoning


## Phase 4

Sub cases
OOTB TDE/row configuration


POST /configuration/<type>  
GET /configuration/<type>




Deliverables of Workshop
- API Specification  
- Example Case Instance XML
- Example Case Template XML
- KOOP ML Team will estimate the integration with the Case REST API(s)  
- Balvinder to estimate work for Case API for Phase 1
- KOOP Team to 
    - discuss Owner, Reader, Contributor i.e. authorisation in the KIWI application
    - case instance based on specific version of the case template, whether there is a need to migrate to new version of case template.
    - discuss future functionality of Case Management API for e.g. process validation, enforcement, planning, re-planning.     
  
  
Internal Actions
- Balvinder to discuss internally (SA) around other general use cases of Case Management, and if the API spec aligns. 


- Versioning
- Patch Requests

